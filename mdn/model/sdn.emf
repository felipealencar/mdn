@gmf
@namespace(uri="mdn", prefix="")
package mdn;

@gmf.diagram
class Sdn {
  val NetworkNode[*] nodes;
  val Policy[*] policies;
  val PolicyObject[*] policyObjects;
  val Group[*] groups;
}

@gmf.node(figure="figures.ControllerFigure", label="name", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/controller.gif", label.placement="external")
class Controller extends NetworkNode {
  attr String type;
}

enum PacketHeaders {
  IN_PORT = 0;
  MAC_SRC = 1;
  MAC_DST = 2;
  VLAN_ID = 3;
  VLAN_PRIO = 4;
  ETH_TYPE = 5;
  IP_SRC = 6;
  IP_DST = 7;
  IP_TOS = 8;
  IP_PORT = 9;
  L4_SPORT = 10;
  L4_DPORT = 11;
}

@gmf.node(label="name", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/host.gif", figure="figures.HostFigure", label.placement="external")
class Host extends NetworkNode {

  @gmf.link(target.decoration="none", source.decoration="none", style="solid", color="0,0,0")
  ref Switch hostSwitch;
}

@gmf.node(label="name", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/switch.gif", figure="figures.SwitchFigure", label.placement="external")
class Switch extends NetworkNode {
  attr int ports;

  @gmf.link(target.decoration="none", source.decoration="none", style="solid", color="0,0,0")
  ref Controller[*] switchController;

  @gmf.link(target.decoration="none", source.decoration="none", style="solid", color="0,0,0", switches.constraint="self <> oppositeEnd", source.constraint="self <> oppositeEnd")
  ref Switch[*] switches;
}

abstract class NetworkNode {
  attr String name;
  attr String mac;
  attr String ip;
}

enum Actions {
  FORWARD = 0;
  DROP = 1;
  MODIFY = 2;
  MONITOR = 0;
}

@gmf.node(figure="figures.PolicyFigure", label="name", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/policy.gif", label.placement="external")
class Policy {

  @gmf.link(target.decoration="none", source.decoration="none", style="dash", color="0,0,0", tool.name="sourceHost")
  transient ref Host[*] sourceHostPolicy;

  @gmf.link(target.decoration="arrow", source.decoration="none", style="dash", color="0,0,0", tool.name="targetHost")
  transient ref Host[*] targetHostPolicy;
  attr String name;

  @gmf.link(target.decoration="none", source.decoration="none", style="dash", color="0,0,0")
  transient ref Condition policyCondition;

  @gmf.link(target.decoration="none", source.decoration="none", style="dash", color="0,0,0")
  ref Action policyAction;
}

@gmf.node(figure="figures.ActionFigure", label="type", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/action.gif", label.placement="external")
class Action extends PolicyObject {
  attr Actions type;

  @gmf.link(target.decoration="arrow", source.decoration="none", style="dash", color="0,0,0")
  ref PacketHeader actionPacketHeader;

  @gmf.link(target.decoration="arrow", source.decoration="none", style="dash", color="0,0,0")
  ref NetworkNode actionForwardToNode;
}

@gmf.node(label="condition", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/condition.gif", label.placement="external", figure="figures.ConditionFigure")
class Condition extends PolicyObject {
  attr Conditions condition = "WHERE";

  @gmf.link(target.decoration="none", source.decoration="none", style="dash", color="0,0,0")
  ref Time conditionTime;

  @gmf.link(target.decoration="none", source.decoration="none", style="dash", color="0,0,0")
  ref Traffic conditionTraffic;

  @gmf.link(target.decoration="none", source.decoration="none", style="dash", color="0,0,0")
  ref PacketHeader conditionPacket;
}

enum Conditions {
  WHEN = 0;
  WHERE = 1;
}

enum RelationalOperators {
  EQUAL_TO = 0;
  NOT_EQUAL_TO = 1;
  GREATER_THAN = 2;
  LESS_THAN = 3;
  IN = 0;
  OUT = 0;
}

@gmf.node(figure="figures.TrafficFigure", label="operator,value,unit", label.pattern="{0}: {2}{1}", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/traffic.gif", label.placement="external")
class Traffic extends PolicyObject {
  attr RelationalOperators operator;
  attr String unit = "MB";
  attr int value;
}

@gmf.node(figure="figures.TimeFigure", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/time.gif", label.placement="external", label="operator,beginDate,endDate", label.pattern="{0}: {1} - {2}")
class Time extends PolicyObject {
  attr RelationalOperators operator;
  attr EDate beginDate;
  attr EDate endDate;
}

@gmf.node(figure="figures.PacketHeaderFigure", label.icon="false", tool.small.bundle="mdn.edit", tool.small.path="/icons/full/obj16/packetheader.gif", label.placement="external", label="operator,header,value", label.pattern="{0}: [{1}] {2}")
class PacketHeader extends PolicyObject {
  attr RelationalOperators operator;
  attr PacketHeaders header = "";
  attr String value;
}

abstract class PolicyObject {
}

class Group {
  val Host[*] hostsGroup;
}

