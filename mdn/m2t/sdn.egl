[%
import "header.egl";
import "utils.egl";
import "condition.egl"; 
%]

[% var header = getCodeHeader(); %]
[%=header%]
[% 
var policyCounter : Integer = 0;
var counterActionDrop : Integer = 0;
var counterActionModify : Integer = 0;
var counterActionForward : Integer = 0;
var counterActionMonitor : Integer = 0;
%]
def mdn_handler (event):
	  
	# Handles packet events and kills the ones with blocked property
 	packet = event.parsed
				
[%
for (policy in Policy.all) {
	if (policy.policyAction.isDefined()) {
		if (policy.policyAction.type.value = Actions#DROP.value and policy.sourceHostPolicy.isDefined() and policy.targetHostPolicy.isDefined()) {
%]
			ip = packet.find('ipv4')
			# This packet isn't IP!
			if ip is None: 
			    return
		    # The flow is in the block list
			elif str(ip.srcip) == '[%=policy.sourceHostPolicy.ip.toString()%]' and str(ip.dstip) == '[%=policy.targetHostPolicy.ip.toString()%]':
				# Verify its conditions, if any				
				//conditions.egl
				[% var stringConditions : String = verifyConditions(policy); %]
				[% if (stringConditions.length() > 1) { %]
				[%='if ('+stringConditions+')'%]:
					print("It is in the blocked list source %s - destination %s", ip.srcip, ip.dstip)
					event.halt = True
				else
					event.halt = False
				[% } %]
				[% else { %]
				print("It is in the blocked list source %s - destination %s", ip.srcip, ip.dstip)
				event.halt = True
				[% } %]		
			else:
			    print("Allowed source %s - destination %s", ip.srcip, ip.dstip)
[%			
			if(counterActionDrop == 0) {
				counterActionDrop = counterActionDrop + 1;
			}			
		}
	}
}
if(counterActionDrop > 0) {
%]
def launch ():
	core.openflow.addListenerByName("PacketIn", mdn_handler)
				
[%
}
%]		
		
[%
%]


[%
operation isEmpty (object) {
   if(object.size > 0){
      return false;
   }
   return true;
}
%]

[%
operation verifySubFolders (object) {
   if(not isEmpty(object)){
      %]cd [%=object.name%]
      [%
      } 
   }
%]