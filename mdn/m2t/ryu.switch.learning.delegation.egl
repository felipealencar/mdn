[% /*TODO: FILTRAR PACOTES POR FLUXO E HEADER*/ %]
[% /*TODO: MUDAR NOME DA CLASSE*/ %]
[% import "ryu.switch.learning.delegation.header.egl"; %]
      
class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    _CONTEXTS = {'dpset': dpset.DPSet}
    switch_to_monitor = []

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # install table-miss flow entry
        #
        # We specify NO BUFFER to max_len of the output action due to
        # OVS bug. At this moment, if we specify a lesser number, e.g.,
        # 128, OVS will send Packet-In with invalid buffer_id and
        # truncated packet data. In that case, we cannot output packets
        # correctly.  The bug has been fixed in OVS v2.1.0.
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

    def add_flow(self, datapath, priority, match, actions, buffer_id=None):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        if datapath.id in self.switch_to_monitor:
            metadata_mask = 0 #TODO: change to a list of masks for each capability
            metadata_value = datapath.id
            inst = [parser.OFPInstructionWriteMetadata(metadata_value, metadata_mask),
                    parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        else:
            inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]

        if buffer_id:
            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,
                                    priority=priority, match=match,
                                    instructions=inst)
        else:
            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                    match=match, instructions=inst)
        return datapath.send_msg(mod)

    #Function called when a PACKET_IN message arrives at the controller
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):

        # If you hit this you might want to increase
        # the "miss_send_length" of your switch
        if ev.msg.msg_len < ev.msg.total_len:
            self.logger.debug("packet truncated: only %s of %s bytes",
                              ev.msg.msg_len, ev.msg.total_len)
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            # ignore lldp packet
            return
        dst = eth.dst
        src = eth.src

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)

        # learn a mac address to avoid FLOOD next time.
        self.mac_to_port[dpid][src] = in_port

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        # install a flow to avoid packet_in_handler next time
        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
            # verify if we have a valid buffer_id, if yes avoid to send both
            # flow_mod & packet_out
            if msg.buffer_id != ofproto.OFP_NO_BUFFER:
                self.add_flow(datapath, 1, match, actions, msg.buffer_id)
                return
            else:
                self.add_flow(datapath, 1, match, actions)
        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                  in_port=in_port, actions=actions, data=data)
        datapath.send_msg(out)

    #Performs normal forwarding but writes metadata at the packets
    def _define_flow_rule_to_mirror_and_monitor(self, dp):
        eth_IP = ether.ETH_TYPE_IP

	    match = dp.ofproto_parser.OFPMatch()	
        actions = [dp.ofproto_parser.OFPActionOutput(dp.ofproto.OFPP_FLOOD, 0)]
        self.logger.info("%s %s", dp.id, eth_IP)

        print self.add_flow(dp, 1, match, actions)

    #Performs normal forwarding but matches metadata from marked switches
    def _handle_mirrored_flow(self, dp):
        eth_IP = ether.ETH_TYPE_IP
        
        #foreach monitored switch add a flow rule like that
        match = dp.ofproto_parser.OFPMatch(metadata=1) #TODO: change 1 to dp.id
        actions = [dp.ofproto_parser.OFPActionOutput(dp.ofproto.OFPP_FLOOD, 0)]
        self.logger.info("%s %s", dp.id, eth_IP)

        print self.add_flow(dp, 2, match, actions)
[% //IMPROVE COMPATIBILITY %]
    @set_ev_cls(dpset.EventDP, dpset.DPSET_EV_DISPATCHER)
    def handler_datapath(self, ev):
[% /*CHECK APPLICATIONS
	 CHECK PROTOCOLS (E.G., MONITOR APP)
	 CHECK SOURCE/TARGET SWITCH HAS THE APP PROTOCOL
	 	IF HAS: DP.ID -> NORMAL LEARNING
	 	IF HASNT: DP.ID -> FLOOD OR TRAFFIC SHAPPING*/ %]
[% /* TODO: NAVIGATE BY THE APPMONITOR */ %]
[% for(monitor in AppMonitor.all) {
	//Comparing if the target switch supports the protocol used by the monitor, if not:
	if (monitor.targetSwitch.supportedProtocols.concat().toLowerCase().contains(monitor.type.getName().toLowerCase()) == false){
		//Configuring the switches for flow delegation algorithm
		for (s in OpenFlowSwitch.All) { %]
			[% /*The target switch is equal to the current switch. Install the flow rules at to delegate the traffic.*/ %]
			[% if (s.id == monitor.targetSwitch.id) { %]
	 	if ev.enter and ev.dp.id == [%=s.id%]:
            print('mirroring flows from dpid', ev.dp.id)
	        self.switch_to_monitor.append(ev.dp.id)
            self._define_flow_rule_to_mirror_and_monitor(ev.dp)
			[% } %]
			[% /*Install the metadata to match and flood the flows coming from the monitored switches.*/ %]
			[% /*TODO: Traffic shape.*/ %]
			[% else {%]
        if ev.enter and ev.dp.id == [%=s.id%]:
	        print('handle mirrored flow in dpid', ev.dp.id)
	        self._handle_mirrored_flow(ev.dp)
[%			} 
		}
	}	
} %]