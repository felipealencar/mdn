[% /*TODO: FILTRAR PACOTES POR FLUXO E HEADER*/ %]
[% import "ryu.monitor.header.egl"; %]
[% for (monitor in AppMonitor.all) {
	if (monitor.type == "NETCONF"){ %]
		opts = [cfg.StrOpt('address', default='[%=monitor.serverAddress%]',
                   help='NetFlow Collector bind address'),
				cfg.IntOpt('port', default=3000,
                   help='NetFlow Collector port'),
				cfg.IntOpt('max_udp_msg_size', default=1472,
                   help='Maximum size of UDP messages')]

		cfg.CONF.register_opts(opts, 'plow')
	
		class NetFlow(app_manager.RyuApp):
    		def __init__(self, *args, **kwargs):
        		super(NetFlow, self).__init__(*args, **kwargs)
        		self._address = self.CONF.plow.address
        		self._port = self.CONF.plow.port
        		self._udp_msg_size = self.CONF.plow.max_udp_msg_size
        		self._udp_sock = None

    		def _handle(self, buf, addr):

        		packet = netflow.NetFlow.parser(buf)
        
        		if not packet:
            		print('not a packet')
            		return

				print packet.__dict__
				netflowPacket = packet.__dict__
				for flow in netflowPacket['flows']:
	    			print('flow',flow.__dict__)

    		def _recv_loop(self):
        		self.logger.info('Listening on %s:%s for netflow agents' %
                         (self._address, self._port))

        		while True:
            		buf, addr = self._udp_sock.recvfrom(self._udp_msg_size)
            		t = hub.spawn(self._handle, buf, addr)
            		self.threads.append(t)

    		def start(self):
        		self._udp_sock = hub.socket.socket(hub.socket.AF_INET,
                                           hub.socket.SOCK_DGRAM)
        		self._udp_sock.bind((self._address, self._port))

        		t = hub.spawn(self._recv_loop)

        		super(NetFlow, self).start()
	            
        		return t
[%  }
   }%]