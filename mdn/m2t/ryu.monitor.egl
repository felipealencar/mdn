[%
import "header.egl";
import "utils.egl";
import "condition.egl";
import "firewall.egl"; 
import "monitor.egl"; 
%]

[% var header = getCodeHeader(); %]
[%=header%]
[% 
var ruleCounter : Integer = 0;
var counterActionDrop : Integer = 0;
var counterActionModify : Integer = 0;
var counterActionForward : Integer = 0;
var counterActionMonitor : Integer = 0;
%]
def mdn_handler (event):
  # Handles packet events and kills the ones with blocked property
  packet = event.parsed
				
[%
for (rule in Rule.all) {
	if (rule.ruleAction.isDefined()) {
		if (rule.ruleAction.type.value = Actions#DROP.value and rule.sourceHostRule.isDefined() and rule.targetHostRule.isDefined()) {
			
			if(counterActionDrop == 0) {
				
				counterActionDrop = counterActionDrop + 1;
			}		
  actionDrop(rule);
			
	
		}
		//SE A AÇÃO FOR MONITOR
		if (rule.ruleAction.type.value = Actions#MONITOR.value and rule.sourceHostRule.isDefined() and rule.targetHostRule.isDefined()) {

  monitorAction(rule);	
			
			if(counterActionMonitor == 0) {
				counterActionMonitor = counterActionMonitor + 1;
			}	
		}
	}
}
%]
[%

%]
def launch ():
[%
if(counterActionDrop > 0) {
%]
  core.openflow.addListenerByName("PacketIn", mdn_handler)
				
[%
}
if(counterActionMonitor > 0) {
%]		
  from pox.lib.recoco import Timer

  # attach handsers to listners
  core.openflow.addListenerByName("FlowStatsReceived", _handle_flowstats_received) 
  core.openflow.addListenerByName("PortStatsReceived", _handle_portstats_received) 

  # timer set to execute every five seconds
  Timer(5, _timer_func, recurring=True)	
[%
}
%]


/*
operation isEmpty (object) {
   if(object.size > 0){
      return false;
   }
   return true;
}
*/


//operation verifySubFolders (object) {
 //  if(not isEmpty(object)){
//      cd =object.name
      

/*
# Copyright (C) 2011 Nippon Telegraph and Telephone Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import struct

from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
from ryu.ofproto import ether
from ryu.lib.mac import haddr_to_str
from ryu.controller import dpset
from ryu.topology import api
from ryu.topology import event
from ryu.lib.packet import mpls


class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    _CONTEXTS = {'dpset': dpset.DPSet}

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # install table-miss flow entry
        #
        # We specify NO BUFFER to max_len of the output action due to
        # OVS bug. At this moment, if we specify a lesser number, e.g.,
        # 128, OVS will send Packet-In with invalid buffer_id and
        # truncated packet data. In that case, we cannot output packets
        # correctly.  The bug has been fixed in OVS v2.1.0.
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

    def add_flow(self, datapath, priority, match, actions, buffer_id=None):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        if datapath.id == 1:
            metadata_mask = 123456
            metadata_value = 1
            inst = [parser.OFPInstructionWriteMetadata(metadata_value, metadata_mask),
                    parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        elif datapath.id == 2:
            metadata_mask = 123456
            metadata_value = 0
            inst = [parser.OFPInstructionWriteMetadata(metadata_value, metadata_mask),
                    parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]

        if buffer_id:
            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,
                                    priority=priority, match=match,
                                    instructions=inst)
        else:
            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                    match=match, instructions=inst)
        return datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):

        # If you hit this you might want to increase
        # the "miss_send_length" of your switch
        if ev.msg.msg_len < ev.msg.total_len:
            self.logger.debug("packet truncated: only %s of %s bytes",
                              ev.msg.msg_len, ev.msg.total_len)
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            # ignore lldp packet
            return
        dst = eth.dst
        src = eth.src

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)

        # learn a mac address to avoid FLOOD next time.
        self.mac_to_port[dpid][src] = in_port

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        # install a flow to avoid packet_in_handler next time
        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
            # verify if we have a valid buffer_id, if yes avoid to send both
            # flow_mod & packet_out
            if msg.buffer_id != ofproto.OFP_NO_BUFFER:
                self.add_flow(datapath, 1, match, actions, msg.buffer_id)
                return
            else:
                self.add_flow(datapath, 1, match, actions)
        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                  in_port=in_port, actions=actions, data=data)
        datapath.send_msg(out)

    def _define_flow_rule_to_copy_and_monitor(self, dp):
        eth_IP = ether.ETH_TYPE_IP
        actions = [dp.ofproto_parser.OFPActionOutput(dp.ofproto.OFPP_FLOOD, 0)]
        match = dp.ofproto_parser.OFPMatch()
        self.logger.info("%s %s", dp.id, eth_IP)

        print self.add_flow(dp, 1, match, actions)

    def _define_flow_to_monitor(self, dp):
        eth_IP = ether.ETH_TYPE_IP

        match = dp.ofproto_parser.OFPMatch(metadata=1)
        actions = [dp.ofproto_parser.OFPActionOutput(dp.ofproto.OFPP_FLOOD, 0)]
        self.logger.info("pra dar match metadata %s %s", dp.id, eth_IP)

        print self.add_flow(dp, 2, match, actions)

    @set_ev_cls(dpset.EventDP, dpset.DPSET_EV_DISPATCHER)
    def handler_datapath(self, ev):
        if ev.enter and ev.dp.id == 1:
            print('dpid', ev.dp.id)
            self._define_flow_rule_to_copy_and_monitor(ev.dp)
        elif ev.enter and ev.dp.id == 2:
	    print('dpid', ev.dp.id)
	    self._define_flow_to_monitor(ev.dp)
*/